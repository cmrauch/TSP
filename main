#include <iostream>
#include <vector>
#include "TSP_Algorithms.h"
using namespace std;
using namespace chrono;
int rows, columns, V = 10;
int runTime = ;
//const int rows = 10;
//const int columns = 10;



int main() {

    // ========================================================================
    vector<vector<int>> cities;

    cout << "{ ";
    for(int row_count = 0; row_count < rows; ++row_count)
    {
        vector <int> cityRow;
        cout << "{ ";
        for (int col_count = 0; col_count < columns; ++col_count)
        {
            int b = rand() % 200 + 1;
            cityRow.push_back(b);
            cout << cityRow.at(col_count);
            if((columns-1) != col_count)
              cout << ", ";
        }
        cities.push_back(cityRow);
        cout << "}\n  ";
    }
cout << "}\n";


    vector<vector<int>> state(cities.size());
    for(auto& neighbors : state)
        neighbors = vector<int>((1 << cities.size()) - 1, INT_MAX);

    auto start = high_resolution_clock::now();
    for(int i = 0;i<runTime;++runTime)
      cout << "(Dynamic) minimum: " << tsp(cities, 0, 1, state) << endl;
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop-start);
    cout << duration.count() * .000001 << " seconds" << endl;

    // =========================================================================

    int s = 0;
    start = high_resolution_clock::now();
    cout << "(Naive) minimum: " << TSP_Naive(cities, s) << endl;
    stop = high_resolution_clock::now();
    duration = duration_cast<microseconds>(stop-start);
    cout << duration.count() * .000001 << " seconds" << endl;

    return 0;

}


#include <iostream>
#include <vector>
#include "TSP_Algorithms.h"
using namespace std;
using namespace chrono;
int rows, columns, V = 10;
int runTime = ;
//const int rows = 10;
//const int columns = 10;



int main() {

    // ========================================================================
    vector<vector<int>> cities;

    cout << "{ ";
    for(int row_count = 0; row_count < rows; ++row_count)
    {
        vector <int> cityRow;
        cout << "{ ";
        for (int col_count = 0; col_count < columns; ++col_count)
        {
            int b = rand() % 200 + 1;
            cityRow.push_back(b);
            cout << cityRow.at(col_count);
            if((columns-1) != col_count)
              cout << ", ";
        }
        cities.push_back(cityRow);
        cout << "}\n  ";
    }
cout << "}\n";


    vector<vector<int>> state(cities.size());
    for(auto& neighbors : state)
        neighbors = vector<int>((1 << cities.size()) - 1, INT_MAX);

    auto start = high_resolution_clock::now();
    for(int i = 0;i<runTime;++runTime)
      cout << "(Dynamic) minimum: " << tsp(cities, 0, 1, state) << endl;
    auto stop = high_resolution_clock::now();
    auto duration = duration_cast<microseconds>(stop-start);
    cout << duration.count() * .000001 << " seconds" << endl;

    // =========================================================================

    int s = 0;
    start = high_resolution_clock::now();
    cout << "(Naive) minimum: " << TSP_Naive(cities, s) << endl;
    stop = high_resolution_clock::now();
    duration = duration_cast<microseconds>(stop-start);
    cout << duration.count() * .000001 << " seconds" << endl;

    return 0;

}
// ==============================================================================
include <vector>
#include <bits/stdc++.h>
#include "main.cpp"
using namespace std;
// ==== Naive Approach ====

//const int V = 10;

// implementation of traveling Salesman Problem
int TSP_Naive(vector<vector<int>> &cities, int s)
{
    // store all vertex apart from source vertex
    vector<int> vertex;
    for (int i = 0; i < V; i++)
        if (i != s)
            vertex.push_back(i);

    // store minimum weight Hamiltonian Cycle.
    int min_path = INT_MAX;
    do {

        // store current Path weight(cost)
        int current_pathweight = 0;

        // compute current path weight
        int k = s;
        for (int i = 0; i < vertex.size(); i++) {
            current_pathweight += cities.at(k).at(vertex.at(i));
            k = vertex[i];
        }
        current_pathweight += cities.at(k).at(s);

        // update minimum
        min_path = min(min_path, current_pathweight);

    } while (next_permutation(vertex.begin(), vertex.end()));

    return min_path;
}


/**
    \brief Given a complete, undirected, weighted graph in the form of an adjacency matrix,
           returns the smallest tour that visits all nodes and starts and ends at the same
           node. This dynamic programming solution runs in O(n * 2^n).
    \return the minimum cost to complete the tour
*/
int tsp(const vector<vector<int>>& cities, int pos, int visited, vector<vector<int>>& state)
{
    if(visited == ((1 << cities.size()) - 1))
        return cities[pos][0]; // return to starting city

    if(state[pos][visited] != INT_MAX)
        return state[pos][visited];

    for(int i = 0; i < cities.size(); ++i)
    {
        // can't visit ourselves unless we're ending & skip if already visited
        if(i == pos || (visited & (1 << i)))
            continue;

        int distance = cities[pos][i] + tsp(cities, i, visited | (1 << i), state);
        if(distance < state[pos][visited])
            state[pos][visited] = distance;
    }

    return state[pos][visited];
}
